配合Botany的设计要求，把entryPoint放到选手代码文件一起提交。把原main文件改名为controller，原main函数改为run_ai(init: callable, get_action: callable)，在选手代码文件的末尾添几行来调用这个函数。
然后把库文件放到`/lib`目录。还得tmd注意彼此不能命名冲突。好在C++文件和Python文件放在一起也没关系，不需要强制写成 THUAI6py 之类的；由于选手包之前已经发了，为了少做修改就将就混在一起吧。

提交一个C语言版 judge，但实际的工作由 Unity StandAlone Player 完成。
提交完judge后，在`submissions/`里找到指定编号的文件，把供使用的文件放进目录。

注意权限问题，如运行程序、写入文件等。

---

将本地文件拷贝到服务器：
1. 首先确保指定目录存在且可写入
2. `scp <source> <target>`. 拷贝整个目录就加个 `-r`.

---

链接库问题。可使用 `ldd` 命令查看可执行文件的依赖库。

Alpine Linux 不兼容 glibc 且尝试后发现简直没法解决，故改用 Ubuntu 作为基础镜像。

---

后端调试：

pwsh的启动指令为（用法和PowerShell不太一样）：
`pwsh -Command "<command>"`
<command>部分即是在pwsh怎么执行就怎么写，注意引号和转义即可。调用跨了几层，转义起来比较麻烦。

`pwsh -Command "./THUAI6.x86_64 \"%s\" \"%s\" -batchmode"`

测试顺序：

```bash
pwsh -Command "./THUAI6.x86_64 \"/var/botany/submissions/92/bin\" \"/var/botany/submissions/92/bin\" -batchmode"

isolate --run -b 0 --dir=box=/var/botany/submissions/92 --dir=botlib=/var/botany/lib --dir=tmp= --dir=proc=  --silent -- bin
isolate --run -b 1 --dir=box=/var/botany/submissions/92 --dir=botlib=/var/botany/lib --dir=tmp= --dir=proc=  --silent -- bin
isolate --run -b 1 --dir=box=/var/botany/submissions/99 --dir=botlib=/var/botany/lib --dir=tmp= --dir=proc= --env=PYTHONPATH=/botlib --silent -- /usr/bin/python3 code.py3

pwsh -Command "./THUAI6.x86_64 \"isolate --run -b 0 --dir=box=/var/botany/submissions/92 --dir=botlib=/var/botany/lib --dir=tmp= --dir=proc=  --silent -- bin\" \"isolate --run -b 1 --dir=box=/var/botany/submissions/92 --dir=botlib=/var/botany/lib --dir=tmp= --dir=proc=  --silent -- bin\" -batchmode"

# C++ vs C++
./match.sh 257 77 92 92
# C++ vs Python
./match.sh 257 77 92 99
# Python vs Python
./match.sh 257 77 99 99
```

要手动给 `isolate` 的各个沙箱创建 box 目录（`isolate --init`生成得不全？）。我还顺手 chmod 了一下给予写权限，不知道有没有必要。
相关目录：`/var/local/lib/isolate/`.

---

获取 report：

不知为何，Unity Player 的输出总会被平台获取、插到了真正的 report 之前，即使重定向到 `/dev/null` 都没用。

于是只好在 Lua 里再把真正的 report 从 Unity Player 提取出来。

---

JavaScript调用Unity：
https://docs.unity3d.com/cn/2021.3/Manual/webgl-interactingwithbrowserscripting.html

---

后端BUG：

match.sh里检测的末尾是`3.py`，但实际上 `python3`代码会被命名为末尾是 `py3`，根本对不上。

./compile.sh 31 "gcc.c"
Compiling 31
./compile.sh: 9: [[: not found
./compile.sh: 11: [[: not found
这是bash语法，然而用在了使用sh执行的程序里。会导致执行失败。故把 sh 改成 bash。
（不过，也可能是在容器里把 sh 指向了 bash；但改成 bash 也没什么坏处）

---

前端 UI BUG（好在不影响逻辑）：

- 提交1个裁判会显示2个
- 即使 设为裁判 了也会显示“未选定本赛事的裁判代码”
